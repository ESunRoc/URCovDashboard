getwd()
setwd("~/Desktop/UR Covid Data")
source("loaddepends.r")
source("loaddepends.r")
source("dataproc.r")
view(data)
View(n.colfunc)
?aggregate
library(readxl)
library(tidyverse)
library(zoo)
library(RcppRoll)
library(gridExtra)
library(grid)
library(plotly)
library(htmlwidgets)
source("dataproc.r")
cumlcases <- ggplot(data, aes(x = Date, y = totcases)) +
geom_line() +
scale_y_continuous(breaks=seq(0, max(data$totcases)+10 ,10)) +
labs(x = "Date", y = "Total Cases", title = "Cumulative cases as a function of time")
cc <- ggplotly(cumlcases, height=650, width=1100)
cc
source("dataproc.r")
source("loaddepends.r")
source("dataproc.r")
plot(data, pch=16)
plot(data$totcases, pch=16)
plot(data$daily.prate, pch=16)
plot(data$Positive, pch=16)
data$daynum <- seq(1, length(data$Date))
daynum
data$daynum
data
View(data)
source("dataproc.r")
plot(data$Positive, pch=16)
lmmod <- lm(data$Positive~data$)
lmmod <- lm(data$Positive~data$daynum)
lmmod
abline(lmmod)
rmse <- function(error) {sqrt(mean(error^2))}
predY <- predict(lmmod, data)
points(data$X, predY, col = "blue", pch=4)
points(data$Positive, predY, col = "blue", pch=4)
points(predY, data$Positive, col = "blue", pch=4)
rmse <- function(error) {sqrt(mean(error^2))}
plot(data$Positive, pch=16)
lmmod <- lm(data$Positive~data$daynum)
abline(lmmod)
predY <- predict(lmmod, data)
points(predY, data$Positive, col = "blue", pch=4)
plot(data$Positive, pch=16)
lmmod <- lm(data$Positive~data$daynum)
abline(lmmod)
predY <- predict(lmmod, data)
points(data$Positive, predY, col = "blue", pch=4)
x <- 3.141592
trunc(x)
round(x, digits=3)
round(data[nrow(data), 4]*100, digits=6)
library(readxl)
library(tidyverse)
library(zoo)
library(RcppRoll)
library(gridExtra)
library(grid)
library(plotly)
library(htmlwidgets)
source("dataproc.r")
data[nrow(data), 3]
data[nrow(data), 2]
round(data[nrow(data), 4]*100, digits=6)
round(data[nrow(data), 4]*100, digits=4)
data <- read_xlsx("covdata.xlsx")
library("easypackages")
my_packages <- c("readxl", "tidyverse", "zoo", "RcppRoll",
"gridExtra", "grid", "plotly", "htmlwidgets")
packages(my_packages)
libraries(my_packages)
rm(my_packages)
data <- read_xlsx("covdata.xlsx")
data$daily.prate <- ifelse(data$Tests<data$Positive, 1, ifelse(data$Tests==0, 0, data$Positive/data$Tests))
data$totcases <- cumsum(data$Positive)
data$tottests <- cumsum(data$Tests)
data$rolltests <- rollmean(data$Tests, k=7, fill=F, align="right")
View(data)
data$rollpos <- rollmean(data$Positive, k=7, fill=F, align="right")
data <- read_xlsx("covdata.xlsx")
data$daily.prate <- ifelse(data$Tests<data$Positive, 1, ifelse(data$Tests==0, 0, data$Positive/data$Tests))
data$totcases <- cumsum(data$Positive)
data$tottests <- cumsum(data$Tests)
data$rolltests <- rollmean(data$Tests, k=7, fill=F, align="right")
data$rollpositives <- rollmean(data$Positive, k=7, fill=F, align="right")
data$rolldaily.prate <- rollmean(data$daily.prate, k=7, fill=NA, align="right")
data$daynum <- seq(1, length(data$Date))
n.colfunc <- function(df, n=7, func){
aggregate(x = df,
by = list(gl(ceiling(nrow(df)/n), n)[1:nrow(df)]),
FUN = func)
}
twoweeksavg <- as.data.frame(n.colfunc(data[2:4], 14, mean))
oneweekavg <- as.data.frame(n.colfunc(data[2:4], 7, mean))
twoweekssum <- as.data.frame(n.colfunc(data[2:4], 14, sum))
oneweeksum <- as.data.frame(n.colfunc(data[2:4], 7, sum))
rollpositives <- ggplot(data, aes(x = Date, y = rollpositives)) +
geom_line() +
labs(x = "Date", y = "Positivity Cases", title = "7 day rolling Cases per Day",
subtitle = "Aligned right")
rpr <- ggplotly(rollpositives)
rpr
data$rollcases <- rollmean(data$Positive, k=7, fill=F, align="right")
GAM.rcases <- ggplot(data, aes(x = Date, y = rollcases)) +
geom_smooth(method = "gam", size = 1) +
labs(x = "Date", y = "Positivity Rate", title = "7 day rolling positivity rate",
subtitle = "Aligned right")
GAM.rases <- ggplotly(GAM.rollcases)
GAM.rases <- ggplotly(GAM.rcases)
GAM.rases
GLM.rcases <- ggplot(data, aes(x = Date, y = rollcases)) +
geom_smooth(method = "glm", size=1) +
labs(x = "Date", y="Cases", title = "7 day rolling cases per day",
subtitle = "Aligned right")
GLM.rcases <- ggplotly(GLM.rcases)
library(mgcv)
gam_model <- gam(rollcases ~ Date, data=data)
summary(gam_model)
glm_model <- glm(rollcases ~ Date, data=data)
summary(glm_model)
logLik.gam(gam_model)
gam_model$aic
glm_model$residuals
summary(glm_model)
1-(83.592/165.040)
summary(gam_model)
GAM.rases
GLM.rcases
LOESS_rcases <- ggplot(data, aes(x = Date, y = rollcases)) +
geom_smooth(method = "loess", size=1) +
labs(x = "Date", y="Cases", title = "7 day rolling cases per day",
subtitle = "Aligned right")
LOESS.rcases <- ggplotly(LOESS.rcases)
LOESS_rcases <- ggplotly(LOESS.rcases)
LOESS_rcases <- ggplot(data, aes(x = Date, y = rollcases)) +
geom_smooth(method = "loess", size=1) +
labs(x = "Date", y="Cases", title = "7 day rolling cases per day",
subtitle = "Aligned right")
LOESS_rcases <- ggplotly(LOESS_rcases)
LOESS_rcases
LOESS_rcases <- ggplot(data, aes(x = Date, y = rollcases)) +
geom_smooth(method = "spline", size=1) +
labs(x = "Date", y="Cases", title = "7 day rolling cases per day",
subtitle = "Aligned right")
LOESS_rcases <- ggplotly(LOESS_rcases)
LOESS_rcases
LOESS_rcases <- ggplot(data, aes(x = Date, y = rollcases)) +
geom_smooth(method = "s", size=1) +
labs(x = "Date", y="Cases", title = "7 day rolling cases per day",
subtitle = "Aligned right")
LOESS_rcases <- ggplotly(LOESS_rcases)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(zoo)
library(RcppRoll)
library(gridExtra)
library(grid)
library(plotly)
library(plotly)
library(htmlwidgets)
source("dataproc.r")
shiny::renderDataTable(data)
install.packages("DT")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
source("dataproc.r")
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(tidyverse)
library(zoo)
library(RcppRoll)
library(gridExtra)
library(grid)
library(plotly)
library(htmlwidgets)
source("dataproc.r")
view(data)
tabdata <- round(data[,]
tabdata <- round(data[,])
tabdata <- round(data, digits=4)
print(prepend(data$rolldaily.prate, c(0,0,0,0,0,0))
)
tabdata <- data
source("dataproc.r")
tabdata <- data
tabdata$rolldaily.prate <- ifelse(tabdata$rolldaily.prate=="NA", 0, tabdata$rolldaily.prate)
tabdata$rolldaily.prate
tabdata$rolldaily.prate <- ifelse(tabdata$rolldaily.prate=NA, 0, tabdata$rolldaily.prate)
tabdata$rolldaily.prate <- ifelse(tabdata$rolldaily.prate=-NA, 0, tabdata$rolldaily.prate)
tabdata$rolldaily.prate <- ifelse(tabdata$rolldaily.prate==NA, 0, tabdata$rolldaily.prate)
tabdata$rolldaily.prate
tabdata$rolldaily.prate <- ifelse(is.na(tabdata$rolldaily.prate)==1, 0, tabdata$rolldaily.prate)
tabdata$rolldaily.prate
tabdata <- data
tabdata$rolldaily.prate <- ifelse(is.na(tabdata$rolldaily.prate)==1, 0, tabdata$rolldaily.prate)
tabdata$rolldaily.prate
tabdata <- data
tabdata
tabdata$rolldaily.prate
tabdata <- data[1:9]
tabdata$rolldaily.prate <- ifelse(is.na(tabdata$rolldaily.prate)==1, 0, tabdata$rolldaily.prate)
tabdata$Positive <- round(tabdata$Positive, digits=6)
tabdata$daily.prate <- round(tabdata$daily.prate, digits=6)
tabdata$rolldaily.prate <- round(tabdata$rolldaily.prate, digits=6)
tabdata$rollcases <- round(tabdata$rollcases, digits=6)
tabdata$rolltests <- round(tabdata$rolltests, digits=6)
DT::datatable(data, options = list(
pageLength=50, scrollX='400px'), filter = 'top')
DT::datatable(tabdata, options = list(
pageLength=50, scrollX='400px'), filter = 'top')
date <- as.Date.character(tabdata$Date)
date
tabdata <- data[1:9]
tabdata$rolldaily.prate <- ifelse(is.na(tabdata$rolldaily.prate)==1, 0, tabdata$rolldaily.prate)
tabdata$Positive <- round(tabdata$Positive, digits=6)
tabdata$daily.prate <- round(tabdata$daily.prate, digits=6)
tabdata$rolldaily.prate <- round(tabdata$rolldaily.prate, digits=6)
tabdata$rollcases <- round(tabdata$rollcases, digits=6)
tabdata$rolltests <- round(tabdata$rolltests, digits=6)
tabdata$date <- as.Date.character(tabdata$Date)
DT::datatable(tabdata, options = list(
pageLength=50, scrollX='400px'), filter = 'top')
tabdata$date <- strptime(tabdata$date)
tabdata$date <- strptime(tabdata$date, format="%Y-%m-%d")
tabdata$date
tabdata$date <- strptime(tabdata$date, format="%Y-%m-%d", tz = "")
tabdata$date
tabdata$date <- strptime(tabdata$date, format="%Y-%m-%d", tz = "EST")
tabdata <- data[1:9]
tabdata$date <- strptime(tabdata$date, format="%Y-%m-%d", tz = "EST")
tabdata$date <- strptime(tabdata$Date, format="%Y-%m-%d", tz = "EST")
tabdata <- data[1:9]
tabdata$Date <- strptime(tabdata$Date, format="%Y-%m-%d", tz = "EST")
tabdata$Date
DT::datatable(tabdata, options = list(
pageLength=50, scrollX='400px'), filter = 'top')
tabdata <- data[1:9]
tabdata$rolldaily.prate <- ifelse(is.na(tabdata$rolldaily.prate)==1, 0, tabdata$rolldaily.prate)
tabdata$Positive <- round(tabdata$Positive, digits=6)
tabdata$daily.prate <- round(tabdata$daily.prate, digits=6)
tabdata$rolldaily.prate <- round(tabdata$rolldaily.prate, digits=6)
tabdata$rollcases <- round(tabdata$rollcases, digits=6)
tabdata$rolltests <- round(tabdata$rolltests, digits=6)
tabdata$Date <- strptime(tabdata$Date, format="%Y-%m-%d", tz = "EST")
DT::datatable(tabdata, options = list(
pageLength=50, scrollX='400px'), filter = 'top')
tabdata <- data[1:9]
tabdata$rolldaily.prate <- ifelse(is.na(tabdata$rolldaily.prate)==1, 0, tabdata$rolldaily.prate)
tabdata$Positive <- round(tabdata$Positive, digits=6)
tabdata$daily.prate <- round(tabdata$daily.prate, digits=6)
tabdata$rolldaily.prate <- round(tabdata$rolldaily.prate, digits=6)
tabdata$rollcases <- round(tabdata$rollcases, digits=6)
tabdata$rolltests <- round(tabdata$rolltests, digits=6)
DT::datatable(tabdata, options = list(
pageLength=50, scrollX='400px'), filter = 'top')
dt_data <- data.frame("Date" = tabdata$Date, "Tests"=tabdata$Tests, "Cases"=tabdata$Positive, "(+) Rate" = tabdata$daily.prate, "Total Cases" = tabdata$totcases, "Total Tests" = tabdata$tottests)
DT::datatable(dt_data, options = list(
pageLength=50, scrollX='400px'), filter = 'top')
typeof(tabdata$Date)
as.Date(tabdata$Date)
dt_data <- data.frame("Date" = as.date(tabdata$Date), "Tests"=tabdata$Tests, "Cases"=tabdata$Positive, "Pos Rate" = tabdata$daily.prate, "Total Cases" = tabdata$totcases, "Total Tests" = tabdata$tottests)
DT::datatable(dt_data, options = list(
pageLength=50, scrollX='400px'), filter = 'top')
dt_data <- data.frame("Date" = as.Date(tabdata$Date), "Tests"=tabdata$Tests, "Cases"=tabdata$Positive, "Pos Rate" = tabdata$daily.prate, "Total Cases" = tabdata$totcases, "Total Tests" = tabdata$tottests)
DT::datatable(dt_data, options = list(
pageLength=50, scrollX='400px'), filter = 'top')
dt_data <- data.frame("Date" = as.Date(data[1]),
"Tests"= data[2],
"Positive"= data[3],
"Pos Rate" = round(data[4], digits=6),
"Total Cases" = data[5],
"Total Tests" = data[6],
"Roll Pos Rate"=round(ifelse(is.na(data[9])==1, 0, data[9]), digits=6),
"Roll Cases" = round(data[8], digits=6),
"Roll Tests" = round(data[7], digits=6)
)
data[1]
tabdata <- data[1:9]
dt_data <- data.frame("Date" = as.Date(tabdata$Date),
"Tests"= data[2],
"Positive"= data[3],
"Pos Rate" = round(data[4], digits=6),
"Total Cases" = data[5],
"Total Tests" = data[6],
"Roll Pos Rate"=round(ifelse(is.na(data[9])==1, 0, data[9]), digits=6),
"Roll Cases" = round(data[8], digits=6),
"Roll Tests" = round(data[7], digits=6)
)
is.na(data[9])==1
round(ifelse(is.na(data[9])==1, 0, data[9]), digits=6)
cleanrollpos <- ifelse(is.na(data[9])==1, 0, data[9])
cleanrollpos
tabdata <- data[1:9]
dt_data <- data.frame("Date" = as.Date(tabdata$Date),
"Tests"=tabdata$Tests,
"Cases"=round(tabdata$Positive, digits=6),
"Pos Rate" = round(tabdata$daily.prate, digits=6),
"Total Cases" = tabdata$totcases,
"Total Tests" = tabdata$tottests,
"Roll Pos Rate"=round(ifelse(is.na(tabdata$rolldaily.prate)==1,
0, tabdata$rolldaily.prate), digits=6),
"Roll Cases" = round(tabdata$rollcases, digits=6),
"Roll Tests" = round(tabdata$rolltests, digits=6)
)
DT::datatable(dt_data, options = list(
pageLength=50, scrollX='400px'), filter = 'top')
a_0 <- sqrt(2)
b_0 <- 0
pi_0 <- 2+ sqrt(2)
a_n1 <- sqrt(a_0)/2 + 1/(2*sqrt(a_0))
b_n1 <- ((1+b_0)*sqrt(a_0)) / (a_0 + b_0)
pi_n1 <- (pi_0*(1+a_n1)*b_n1)/(1+b_n1)
# n = 1
a_n2 <- sqrt(a_n1)/2 + 1/(2*sqrt(a_n1))
b_n2 <- ((1+b_n1)*sqrt(a_n1)) / (a_n1 + b_n1)
pi_n2 <- (pi_n1*(1+a_n2)*b_n2)/(1+b_n2)
# n = 2
a_n3 <- sqrt(a_n2)/2 + 1/(2*sqrt(a_n2))
b_n3 <- ((1+b_n2)*sqrt(a_n2)) / (a_n2 + b_n2)
pi_n3 <- (pi_n2*(1+a_n3)*b_n3)/(1+b_n3)
pi_n3
options(scipen=10)
pi_n3
pi_n3 <- (pi_n2*(1+a_n3)*b_n3)/(1+b_n3)
pi_n3
pi_n3==pi
while(pi_thingie <= pi){
a_n1 <- sqrt(a_0)/2 + 1/(2*sqrt(a_0))
b_n1 <- ((1+b_0)*sqrt(a_0)) / (a_0 + b_0)
pi_n1 <- (pi_0*(1+a_n1)*b_n1)/(1+b_n1)
a_0 <- a_n1
b_0 <- b_n1
pi_0 <- pi_n1
}
while(pi_0 <= pi){
a_n1 <- sqrt(a_0)/2 + 1/(2*sqrt(a_0))
b_n1 <- ((1+b_0)*sqrt(a_0)) / (a_0 + b_0)
pi_n1 <- (pi_0*(1+a_n1)*b_n1)/(1+b_n1)
a_0 <- a_n1
b_0 <- b_n1
pi_0 <- pi_n1
}
print(pi_0)
while(pi_0 <= pi){
a_n1 <- sqrt(a_0)/2 + 1/(2*sqrt(a_0))
b_n1 <- ((1+b_0)*sqrt(a_0)) / (a_0 + b_0)
a_0 <- a_n1
b_0 <- b_n1
pi_n1 <- (pi_0*(1+a_n1)*b_n1)/(1+b_n1)
pi_0 <- pi_n1
}
print(pi_0)
while(pi_0 <= pi){
a_n1 <- sqrt(a_0)/2 + 1/(2*sqrt(a_0))
b_n1 <- ((1+b_0)*sqrt(a_0)) / (a_0 + b_0)
a_0 <- a_n1
b_0 <- b_n1
pi_0 <- pi_n1
pi_n1 <- (pi_0*(1+a_n1)*b_n1)/(1+b_n1)
}
print(pi_0)
while(pi_n <= pi){
b_n1 <- (1+b_n)*sqrt(a_n)/(a_n+b_n)
b_n <- b_n1
a_n1 <- sqrt(a_n)/2 + 1/(2*sqrt(a_n))
a_n <- a_n1
pi_n1 <- (pi_n*(1+a_n1)*b_n1)/(1+b_n1)
pi_n <- pi_n1
}
a_n <- sqrt(2)
b_n <- 0
pi_n <- 2+ sqrt(2)
while(pi_n <= pi){
b_n1 <- (1+b_n)*sqrt(a_n)/(a_n+b_n)
b_n <- b_n1
a_n1 <- sqrt(a_n)/2 + 1/(2*sqrt(a_n))
a_n <- a_n1
pi_n1 <- (pi_n*(1+a_n1)*b_n1)/(1+b_n1)
pi_n <- pi_n1
}
pi_n
pi_n1
knitr::render_site()
rmarkdown::render_site()
