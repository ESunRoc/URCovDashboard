data <- read_xlsx("covdata.xlsx")
library(readxl)
library(tidyverse)
library(zoo)
library(RcppRoll)
library(gridExtra)
library(grid)
library(plotly)
library(htmlwidgets)
library(flexdashboard)
data <- read_xlsx("covdata.xlsx")
data
data$daily.prate <- ifelse(data$Tests == 0, 0, data$Positive/data$Tests)
View(data)
data[1][111]
data[111]
data[1, 111]
data[111, 1]
as.character.Date(data[111, 1])
as.character(data[111, 1])
as.character(data[111,1])
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(tidyverse)
library(zoo)
library(RcppRoll)
library(gridExtra)
library(grid)
library(plotly)
library(htmlwidgets)
library(flexdashboard)
data <- read_xlsx("covdata.xlsx")
data$daily.prate <- ifelse(data$Tests == 0, 0, data$Positive/data$Tests)
data$totcases <- cumsum(data$Positive)
data$tottests <- cumsum(data$Tests)
data$rolltests <- rollmean(data$Tests, k=7, fill=F, align="right")
data$rollpos <- rollmean(data$Positive, k=7, fill=F, align="right")
data$rolldaily.prate <- rollmean(data$daily.prate, k=7, fill=NA, align="right")
n.colfunc <- function(df, n=7, func){
aggregate(x = df,
by = list(gl(ceiling(nrow(df)/n), n)[1:nrow(df)]),
FUN = func)
}
twoweeksavg <- n.colfunc(data[2:4], 14, mean)
oneweekavg <- n.colfunc(data[2:4], 7, mean)
twoweekssum <- n.colfunc(data[2:4], 14, sum)
oneweeksum <- n.colfunc(data[2:4], 7, sum)
data[111,1]
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(tidyverse)
library(zoo)
library(RcppRoll)
library(gridExtra)
library(grid)
library(plotly)
library(htmlwidgets)
library(flexdashboard)
data <- read_xlsx("covdata.xlsx")
data$daily.prate <- ifelse(data$Tests == 0, 0, data$Positive/data$Tests)
data$totcases <- cumsum(data$Positive)
data$tottests <- cumsum(data$Tests)
data$rolltests <- rollmean(data$Tests, k=7, fill=F, align="right")
data$rollpos <- rollmean(data$Positive, k=7, fill=F, align="right")
data$rolldaily.prate <- rollmean(data$daily.prate, k=7, fill=NA, align="right")
n.colfunc <- function(df, n=7, func){
aggregate(x = df,
by = list(gl(ceiling(nrow(df)/n), n)[1:nrow(df)]),
FUN = func)
}
twoweeksavg <- n.colfunc(data[2:4], 14, mean)
oneweekavg <- n.colfunc(data[2:4], 7, mean)
twoweekssum <- n.colfunc(data[2:4], 14, sum)
oneweeksum <- n.colfunc(data[2:4], 7, sum)
cumlcases <- ggplot(data, aes(x = Date, y = totcases)) +
geom_line() +
scale_y_continuous(breaks=seq(0, max(data$totcases)+5 ,5)) +
labs(x = "Date", y = "Total Cases (to date)", title = "Cumulative cases as a function of time")
cc <- ggplotly(cumlcases)
GAM.cumlcases <- ggplot(data, aes(x = Date, y = totcases)) +
geom_smooth(method = "gam", size = 1) +
scale_y_continuous(breaks=seq(0, max(data$totcases)+5 ,5)) +
labs(x = "Date", y = "Total Cases (to date)", title = "Cumulative cases as a function of time")
GAM.cc <- ggplotly(GAM.cumlcases)
cumltests <- ggplot(data, aes(x = Date, y = tottests)) +
geom_line() +
labs(x = "Date", y = "Number of Tests", title = "Cumulative Testing as a function of time")
ct <- ggplotly(cumltests)
GAM.cumltests <- ggplot(data, aes(x = Date, y = tottests)) +
geom_smooth(method = "gam", size = 1) +
labs(x = "Date", y="Number of Tests", title = "Cumulative Testing as a function of time")
GAM.ct <- ggplotly(GAM.cumltests)
dailyposrate <- ggplot(data, aes(x = Date, y = daily.prate)) +
geom_line() +
labs(x = "Date", y = "Positivity Rate", title = "Daily positivity rate",
subtitle = "Aligned right")
dpr <- ggplotly(dailyposrate)
GAM.dailyposrate <- ggplot(data, aes(x = Date, y = daily.prate)) +
geom_smooth(method = "gam", size = 1) +
labs(x = "Date", y = "Positivity Rate", title = "Daily positivity rate",
subtitle = "Aligned right")
GAM.dpr <- ggplotly(GAM.dailyposrate)
rollposrate <- ggplot(data, aes(x = Date, y = rolldaily.prate)) +
geom_line() +
labs(x = "Date", y = "Positivity Rate", title = "7 day rolling positivity rate",
subtitle = "Aligned right")
rpr <- ggplotly(rollposrate)
GAM.rollposrate <- ggplot(data, aes(x = Date, y = rolldaily.prate)) +
geom_smooth(method = "gam", size = 1) +
labs(x = "Date", y = "Positivity Rate", title = "7 day rolling positivity rate",
subtitle = "Aligned right")
GAM.rpr <- ggplotly(GAM.rollposrate)
rolltestsgraph <- ggplot(data, aes(x=Date, y=rolltests)) +
geom_line()+
labs(x="Date", y="Tests Conducted", title = "7 day rolling tests per day",
subtitle = "Aligned Right")
rtg <- ggplotly(rolltestsgraph)
GAM.rolltestsgraph <- ggplot(data, aes(x=Date, y=rolltests)) +
geom_smooth(method = "gam", size = 1) +
labs(x="Date", y="Tests Conducted", title = "7 day rolling tests per day",
subtitle = "Aligned Right")
GAM.rtg <- ggplotly(GAM.rolltestsgraph)
casesperday <- ggplot(data, aes(x=Date, y=Positive)) +
geom_line()+
labs(x = "Date", y = "Cases", title = "New cases per day")
cpd <- ggplotly(casesperday)
GAM.casesperday <- ggplot(data, aes(x=Date, y=Positive)) +
geom_smooth()+
labs(x = "Date", y = "Cases", title = "New cases per day")
GAM.cpd <- ggplotly(GAM.casesperday)
testsperday <- ggplot(data, aes(x=Date, y=Tests)) +
geom_line()+
labs(x = "Date", y = "Tests", title = "Tests per day")
tpd <- ggplotly(testsperday)
GAM.testsperday <- ggplot(data, aes(x=Date, y=Tests)) +
geom_smooth(method = "gam", size=1)+
labs(x = "Date", y = "Tests", title = "Tests per day")
GAM.tpd <- ggplotly(GAM.testsperday)
oneweek.avgtests <- ggplot(oneweekavg, aes(x=Group.1, y=Tests, group=1)) +
geom_line() +
labs(x="Weeks since August 1", title="Average Tests Over Time Period",
subtitle = "Temporal mean, t=7")
owat <- ggplotly(oneweek.avgtests)
twoweeks.avgtests <- ggplot(twoweeksavg, aes(x=Group.1, y=Tests, group=1)) +
geom_line() +
labs(x="Fortnights since August 1", title="Average Tests Over Time Period",
subtitle = "Temporal mean, t=14")
twsat <- ggplotly(twoweeks.avgtests)
oneweek.sumtests <- ggplot(oneweeksum, aes(x=Group.1, y=Tests, group=1)) +
geom_line() +
labs(x="Weeks since August 1", title="Cumulative Tests Time Period")
owst <- ggplotly(oneweek.sumtests)
twoweeks.sumtests <- ggplot(twoweekssum, aes(x=Group.1, y=Tests, group=1)) +
geom_line() +
labs(x="Fortnights since August 1", title="Cumulative Tests Time Period")
twst <- ggplotly(twoweeks.sumtests)
date[111,1]
len(data)
length(data)
nrow(data)
data[nrow(data), 4]*100
